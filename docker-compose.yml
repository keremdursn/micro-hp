services:
  kong-database:
    image: postgres:9.6
    container_name: kong-db
    restart: on-failure
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - app-network
    ports:
      - "5440:5432"
    # healthcheck:
    #   test: [ "CMD", "pg_isready", "-U", "kong" ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  kong-migration:
    image: kong:3.6
    depends_on:
      - kong-database
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PASSWORD: kongadmin
    networks:
      - app-network

  kong:
    image: kong:3.6
    container_name: kong
    restart: on-failure
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000" # Proxy HTTP
      - "8443:8443" # Proxy HTTPS
      - "8001:8001" # Admin API HTTP
      - "8444:8444" # Admin API HTTPS
    networks:
      - app-network
    # healthcheck:
    #   test: [ "CMD", "kong", "health" ]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  konga-database:
    image: postgres:9.6
    container_name: konga-db
    restart: on-failure
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: konga
    volumes:
      - konga_data:/var/lib/postgresql/data
    networks:
      - app-network

  konga-prepare:
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:kong@konga-database:5432/konga"
    depends_on:
      - konga-database
    networks:
      - app-network
    restart: on-failure

  konga:
    image: pantsel/konga:latest
    container_name: konga
    restart: unless-stopped
    environment:
      DB_ADAPTER: postgres
      DB_URI: postgresql://kong:kong@konga-database:5432/konga
      NODE_ENV: development
    depends_on:
      - kong-database
    ports:
      - "1337:1337"
    networks:
      - app-network

  # konga:
  #   image: pantsel/konga:latest
  #   container_name: konga
  #   restart: always
  #   environment:
  #     DB_ADAPTER: postgres
  #     DB_HOST: kong_db
  #     DB_PORT: 5432
  #     DB_USER: kong
  #     DB_PASSWORD: kong
  #     DB_DATABASE: kong
  #     NODE_ENV: development
  #   ports:
  #     - "1337:1337"
  #   depends_on:
  #     - kong
  #   networks:
  #     - app-network

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx_api_gateway
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - auth-service
  #     - hospital-service
  #     - personnel-service
  #   networks:
  #     - app-network

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    ports:
      - "8081:8081"
    volumes:
      - ./auth-service:/app
    depends_on:
      - auth-db
    networks:
      - app-network

  auth-db:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: auth_db
    ports:
      - "5433:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  hospital-service:
    build:
      context: .
      dockerfile: hospital-service/Dockerfile
    ports:
      - "8082:8082"
    volumes:
      - ./hospital-service:/app
    depends_on:
      - hospital-db
    networks:
      - app-network

  hospital-db:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: hospital_db
    ports:
      - "5434:5432"
    volumes:
      - hospital_postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  personnel-service:
    build:
      context: .
      dockerfile: personnel-service/Dockerfile
    ports:
      - "8083:8083"
    volumes:
      - ./personnel-service:/app
    depends_on:
      - personnel-db
    networks:
      - app-network

  personnel-db:
    image: postgres:14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: personnel_db
    ports:
      - "5435:5432"
    volumes:
      - personnel_postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheuss
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - app-network
    depends_on:
      - auth-service
      - hospital-service
      - personnel-service

  grafana:
    image: grafana/grafana:latest
    container_name: grafanaa
    ports:
      - "3000:3000"
    networks:
      - app-network
    depends_on:
      - prometheus

  redis:
    image: redis:6.2
    container_name: redis_cach
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

volumes:
  auth_postgres_data:
  hospital_postgres_data:
  personnel_postgres_data:
  redis_data:
  kong_data:
  konga_data:


networks:
  app-network:
    driver: bridge
